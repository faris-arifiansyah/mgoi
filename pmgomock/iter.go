// Automatically generated by MockGen. DO NOT EDIT!

package mgoimock

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of IterManager interface
type MockIterManager struct {
	ctrl     *gomock.Controller
	recorder *_MockIterManagerRecorder
}

// Recorder for MockIterManager (not exported)
type _MockIterManagerRecorder struct {
	mock *MockIterManager
}

func NewMockIterManager(ctrl *gomock.Controller) *MockIterManager {
	mock := &MockIterManager{ctrl: ctrl}
	mock.recorder = &_MockIterManagerRecorder{mock}
	return mock
}

func (_m *MockIterManager) EXPECT() *_MockIterManagerRecorder {
	return _m.recorder
}

func (_m *MockIterManager) All(result interface{}) error {
	ret := _m.ctrl.Call(_m, "All", result)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIterManagerRecorder) All(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "All", arg0)
}

func (_m *MockIterManager) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIterManagerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockIterManager) Done() bool {
	ret := _m.ctrl.Call(_m, "Done")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockIterManagerRecorder) Done() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Done")
}

func (_m *MockIterManager) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIterManagerRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockIterManager) For(result interface{}, f func() error) error {
	ret := _m.ctrl.Call(_m, "For", result, f)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIterManagerRecorder) For(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "For", arg0, arg1)
}

func (_m *MockIterManager) Next(result interface{}) bool {
	ret := _m.ctrl.Call(_m, "Next", result)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockIterManagerRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}

func (_m *MockIterManager) Timeout() bool {
	ret := _m.ctrl.Call(_m, "Timeout")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockIterManagerRecorder) Timeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Timeout")
}
